utils:
  enabled: false
  echo:
    enabled: false
    ingress: 
      enabled: false
      tls:
        # []
        - hosts: [fiwaredsc-consumer.local]
          secretName: wildcardlocal-tls
      hosts: 
        # []
        ## provide a hosts and the paths that should be available     
        - host: fiwaredsc-consumer.local
        - path: /


apisix:
  enabled: true
  # image:
  #   registry: docker.io
  #   repository: bitnami/apisix
  #   tag: 3.11.0
  #   digest: ""
  # ingressController:
  #   enabled: true
  # # -- configuration in regard to the apisix etcd
  etcd:
    # -- should it be enabled
    enabled: true
    ## @param etcd.replicaCount Number of etcd replicas
    ##
    replicaCount: 1
    # -- persistence configuration of etcd
    # persistence:
  #     # -- should it be enabled
  #     enabled: false
  dashboard:
    enabled: true
    service:
      # type: NodePort # Host exposes the NODEIP:PORT curl http://10.110.133.129:80
      type: ClusterIP

    ## @param dashboard.username APISIX Dashboard username
    ##
    username: user
    ## @param dashboard.password APISIX Dashboard password
    ##
    # password: "123"
    ## @param dashboard.existingSecret Name of a existing secret containing the password for APISIX Dashboard
    existingSecret: apisix-dashboard-secrets
    ## @param dashboard.existingSecretPasswordKey Key inside the secret containing the password for APISIX Dashboard
    existingSecretPasswordKey: apisix-dashboard-secret
  #   ## @param dashboard.defaultConfig [string] APISIX Dashboard configuration (evaluated as a template)
  
  dataPlane:
    image: docker.io/bitnami/apisix:3.11.0-debian-12-r0 # The same is also used at #dataPlane.initContainers["register-local-dns"].image
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "1"
        memory: "1Gi"
    ingress:
      enabled: true
      hostname: fiwaredsc-consumer.local
      tls: true
      extraHosts:
        - name: fiwaredsc-consumer.local
          path: /
        - name: fiwaredsc-api6dashboard.local
          path: /
        - name: fiwaredsc-trustanchor.local
          path: /
        - name: fiwaredsc-provider.local
          path: /
        - name: fiwaredsc-consumer.ita.es
          path: /
        - name: fiwaredsc-provider.ita.es
          path: /
      extraTls:
        - hosts: [fiwaredsc-consumer.local, 
                  fiwaredsc-api6dashboard.local,
                  fiwaredsc-trustanchor.local,
                  fiwaredsc-provider.local]
          secretName: wildcardlocal-tls
        - hosts: [fiwaredsc-consumer.ita.es,
                  fiwaredsc-provider.ita.es,
                  fiwaredsc-tir.ita.es]
          secretName: ita.es-tls
    extraConfig:
      deployment:
        # https://apisix.apache.org/docs/apisix/deployment-modes/
        role_data_plane:
        #   # Decoupled
        #   # In the decoupled deployment mode the data_plane and control_plane instances of APISIX are deployed 
        #   # separately, i.e., one instance of APISIX is configured to be a data plane and the other to be a control plane.
          config_provider: etcd
        # role_data_plane:
        #   # Standalone
        #   # The routing rules in the conf/apisix.yaml file are loaded into memory immediately after the APISIX 
        # node service starts. And every time interval (default 1 second), will try to detect whether the file content is 
        # updated, if there is an update, reload the rule.
          # config_provider: yaml
    extraVolumes:
      - name: routes
        configMap:
          name: apisix-routes
      - name: opa-config
        configMap:
          name: opa-config
      - name: opa-lua
        configMap:
          name: opa-lua
      - name: shared-hosts
        emptyDir: {}
    extraVolumeMounts:
      - name: routes
        mountPath: /usr/local/apisix/conf/apisix.yaml
        subPath: apisix.yaml
      - name: opa-lua
        mountPath: /usr/local/apisix/apisix/plugins/opa/helper.lua
        subPath: helper.lua
      - name: opa-lua
        mountPath: /usr/local/apisix/apisix/plugins/opa.lua
        subPath: opa.lua
      - name: shared-hosts
        mountPath: /etc/hosts
        subPath: hosts
    # extraEnvVars:
    #   - name: ENTRYSCRIPTFILE
    #     value: /shared/entryPoint-apisixDataPlane.sh
    #   - name: HOST_IP
    #     valueFrom:
    #       fieldRef:
    #         fieldPath: status.hostIP        
    # command: ["/bin/bash", "-c"]
    # args:
    #   - |
    #     sleep 3600
    #     # /shared/entryPoint-apisixDataPlane.sh
    # containerSecurityContext:
    #   enabled: true
    #   # runAsUser: 0 # Ensure the container starts as root
    #   # runAsGroup: 0 
    #   # runAsNonRoot: false
    #   allowPrivilegeEscalation: true  
      # privileged: false
    initContainers:
      - name: register-local-dns
        image: docker.io/bitnami/apisix:3.11.0-debian-12-r0 # Same values as data-plane.image
        env:
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP        
        command:
          - /bin/bash
        args:
          - -ec
          - |
            #!/bin/bash
            touch /shared/hosts
            cat /etc/hosts > /shared/hosts
            chmod 777 /shared/hosts
            # echo "Creating file $ENTRYSCRIPTFILE"
            # cat <<EOF > $ENTRYSCRIPTFILE
            # #!/bin/bash
            echo "Define the DNSs as a space-separated list"
            DNSs=("fiwaredsc-provider.local" "fiwaredsc-consumer.local")
            echo "The DNSs are ${DNSs[@]}"
            for DNS in "${DNSs[@]}"; do
              echo "Registering DNS $DNS at IP $HOST_IP"
              # Check if the entry already exists
              if ! grep -q "$DNS" /shared/hosts; then
                  echo "Appending $HOST_IP $DNS to /shared/hosts"
                  echo "$HOST_IP $DNS" >> /shared/hosts
              else
                  echo "Entry for $DNS already exists in /shared/hosts"
              fi
            done
            
            echo "--- /etc/hosts ---"
            cat /shared/hosts
            echo "---"
        volumeMounts:
          - name: shared-hosts
            mountPath: /shared
  controlPlane:
    enabled: true
    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "1"
        memory: "1Gi"
