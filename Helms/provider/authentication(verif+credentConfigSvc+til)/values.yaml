# -- configuration for the mysql to be deployed as part of the connector, see https://github.com/bitnami/charts/tree/main/bitnami/mysql for all options
mysql:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  # -- allows to set a fixed name for the services
  fullnameOverride: mysql
  # -- configure authentication to mysql
  auth:
    existingSecret: mysql-secret
  # -- scripts to be executed on db startup
  initdbScripts:
    create.sql: |
      CREATE DATABASE tildb;
      CREATE DATABASE ccsdb;

# -- configuration for the credentials-config-service to be deployed as part of the connector, see https://github.com/FIWARE/helm-charts/tree/main/charts/credentials-config-service for all options
credentials-config-service:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  # -- allows to set a fixed name for the services
  fullnameOverride: cconfig
  # -- connection to the database
  deployment:
    logging:
      level: DEBUG
  database:
    # -- should persistence be used?
    persistence: true
    # -- name of the db user
    username: root
    # -- configuration for the existing secret to get the passwords from
    existingSecret:
      enabled: true
      name: mysql-secret  # mysql.auth.existingSecret or mysql
      key: mysql-root-password
    # -- host of the database
    host: mysql
    # -- name of the schema inside the db
    name: ccsdb

trusted-issuers-list:
  enabled: true
  fullnameOverride: til
  ingress:
    til:
      enabled: false
  database:
      # -- should persistence be used?
      persistence: true
      # -- name of the db user
      username: root
      # -- configuration for the existing secret to get the passwords from
      existingSecret:
        enabled: true
        name: mysql-secret  # mysql.auth.existingSecret or mysql
        key: mysql-root-password
      # -- host of the database
      host: mysql
      # -- name of the schema inside the db
      name: tildb

vcverifier:
  enabled: true
  nameOverride: verifier
  fullnameOverride: verifier

  ingress:
    enabled: false
    hosts:
      # []
      ## provide a hosts and the paths that should be available
      # - host: fiwaredsc-vcverifier.local
      #   paths:
      #     - /
    # -- configure the ingress' tls
    # tls:
    #   # []
    #   - hosts: [fiwaredsc-vcverifier.local]
        # secretName: secret.ita.es-tls
  # -- if a specific service account should be used, it can be configured here
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  serviceAccount:
    # -- specifies if the account should be created
    create: false
  deployment:
    port: 8080 # Mandatory. If it is not specified, it fails!
    server:
      port: 8080
      host: https://fiwaredsc-provider.local
    logging:
      # -- the log level, can be DEBUG, INFO, WARN, ERROR
      level: DEBUG
      # -- should the log be in structured json
      jsonLogging: true
      # -- should requests be logged
      logRequests: true
    verifier:
      # At this local deployment, the Trusted Issuer Registry is located at the same k8s cluster, but other scenarios are possible (use of a dedicated dns or dns/prefix to reach the TIR)
      tirAddress: http://tir.trust-anchor.svc.cluster.local:8080
      did: ${DID}
      policies:
        default:
            SignaturePolicy: {}
            IssuedDateBeforePolicy: {}
            ValidFromBeforePolicy: {}
            ExpirationDateAfterPolicy: {}
            EbsiTrustedIssuerRegistryPolicy:
                registryAddress: http://tir.trust-anchor.svc.cluster.local:8080
                issuerType: Undefined
        credentialTypeSpecific:
            "gx:compliance":
                GaiaXComplianceIssuer:
                    registryAddress: https://registry.gaia-x.fiware.dev/development/api/complianceIssuers
      # ssiKit:
      #     auditorURL: http://my-auditor/go/src/app #
    configRepo:
      # endpoint of the configuration service, to retrieve the scope to be requested and the trust endpoints for the credentials.
      configEndpoint: http://cconfig.provider.svc.cluster.local:8080
      # static configuration for services
      services:
        # name of the service to be configured
        hackathon-service: 
          scope: 
              - VerifiableCredential
              - UserCredential
              - OperatorCredential
          # trusted participants endpoint configuration 
          trustedParticipants:
            # the credentials type to configure the endpoint(s) for
            VerifiableCredential: 
            - http://tir.trust-anchor.svc.cluster.local:8080
            # the credentials type to configure the endpoint(s) for
            UserCredential: 
            - http://tir.trust-anchor.svc.cluster.local:8080
            OperatorCredential: 
            - http://tir.trust-anchor.svc.cluster.local:8080
          # trusted issuers endpoint configuration
          trustedIssuers:
            # the credentials type to configure the endpoint(s) for
            VerifiableCredential: 
            - http://til.provider.svc.cluster.local:8080
            # the credentials type to configure the endpoint(s) for
            UserCredential: 
            - http://til.provider.svc.cluster.local:8080
            OperatorCredential: 
            - http://til.provider.svc.cluster.local:8080
    alternativeConfig: /alternative-conf/server.yaml
    additionalVolumes:
      - name: did-material
        emptyDir: {}
      - name: alternative-conf
        emptyDir: {}
    additionalVolumeMounts:
      - name: alternative-conf
        mountPath: /alternative-conf
    initContainers:
      - name: get-did
        # retrieve all did material required for the realm and store it to a shared folder
        image: alpine:latest
        command:
          # - /bin/bash
          - /bin/sh
        args:
          - -ec
          - |
            #!/bin/sh
            apk add --no-cache wget gettext && envsubst --help
            cd /did-material
            wget http://did:3000/did-material/cert.pfx
            wget http://did:3000/did-material/did.env
            export $(cat /did-material/did.env)
            envsubst < /original-conf/server.yaml | tee /alternative-conf/server.yaml
        volumeMounts:
          - name: did-material
            mountPath: /did-material
          - name: config-volume
            mountPath: /original-conf
          - name: alternative-conf
            mountPath: /alternative-conf
      - name: register-at-tir
        image: ubuntu
        command:
          - /bin/bash
        args:
          - -ec
          - |
            #!/bin/bash
            export $(cat /did-material/did.env)
            apt-get -y update; apt-get -y install curl
            curl -X 'POST' 'http://tir.trust-anchor.svc.cluster.local:8080/issuer' -H 'Content-Type: application/json' -d "
              {
                \"did\": \"${DID}\", 
                \"credentials\": []
              }"
        volumeMounts:
          - name: did-material
            mountPath: /did-material
