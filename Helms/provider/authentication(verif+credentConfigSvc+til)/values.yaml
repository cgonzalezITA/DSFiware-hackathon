utils:
  enabled: true

# -- configuration for the did-helper, should only be used for demonstrational deployments, 
# see https://hub.docker.com/repository/docker/itainnovaprojects/ita-didweb-generator/general
did:
  enabled: true
  type: web
  port: 3000
  pfx:
    fileName: cert.pfx
    alias: ita.es
    secretName: did-secret
    secretKeyField: store-pass
  serviceType: ClusterIP
  baseURL: https://fiwaredsc-provider.ita.es
  outputFolder: /cert
  cert:
    country: es
    state: ES-AR
    locality: Zaragoza
    organization: ITA
    commonName: www.fiwaredsc-provider.ita.es
    organizationunit: it
  ingress:
    enabled: false
    host: fiwaredsc-provider.ita.es

# -- configuration for the mysql to be deployed as part of the connector, see https://github.com/bitnami/charts/tree/main/bitnami/mysql for all options
mysql:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  # -- allows to set a fixed name for the services
  fullnameOverride: mysql
  # -- configure authentication to mysql
  auth:
    existingSecret: mysql-secret
  # -- scripts to be executed on db startup
  initdbScripts:
    create.sql: |
      CREATE DATABASE tildb;
      CREATE DATABASE ccsdb;

# -- configuration for the credentials-config-service to be deployed as part of the connector, see https://github.com/FIWARE/helm-charts/tree/main/charts/credentials-config-service for all options
credentials-config-service:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  # -- allows to set a fixed name for the services
  fullnameOverride: cconfig
  # -- connection to the database
  deployment:
    logging:
      level: DEBUG
  database:
    # -- should persistence be used?
    persistence: true
    # -- name of the db user
    username: root
    # -- configuration for the existing secret to get the passwords from
    existingSecret:
      enabled: true
      name: mysql-secret  # mysql.auth.existingSecret or mysql
      key: mysql-root-password
    # -- host of the database
    host: mysql
    # -- name of the schema inside the db
    name: ccsdb

trusted-issuers-list:
  enabled: true
  fullnameOverride: til
  ingress:
    til:
      enabled: false
  database:
      # -- should persistence be used?
      persistence: true
      # -- name of the db user
      username: root
      # -- configuration for the existing secret to get the passwords from
      existingSecret:
        enabled: true
        name: mysql-secret  # mysql.auth.existingSecret or mysql
        key: mysql-root-password
      # -- host of the database
      host: mysql
      # -- name of the schema inside the db
      name: tildb

vcverifier:
  enabled: true
  nameOverride: verifier
  fullnameOverride: verifier

  ingress:
    enabled: false
  # -- if a specific service account should be used, it can be configured here
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  serviceAccount:
    # -- specifies if the account should be created
    create: false
  deployment:
    port: 8080
    logging:
      # -- the log level, can be DEBUG, INFO, WARN, ERROR
      level: TRACE
      # -- should the log be in structured json
      jsonLogging: true
      # -- should requests be logged
      logRequests: true
    verifier:
      # At this local deployment, the Trusted Issuer Registry is located at the same k8s cluster, but other scenarios are possible (use of a dedicated dns or dns/prefix to reach the TIR)
      tirAddress: http://tir.trust-anchor.svc.cluster.local:8080
      did: ${DID}
    # server:
    #   host: https://fiwaredsc-vcverifier.ita.es
    configRepo:
      configEndpoint: http://cconfig:8080
    alternativeConfig: /alternative-conf/server.yaml
    additionalVolumes:
      - name: did-material
        emptyDir: {}
      - name: alternative-conf
        emptyDir: {}
    additionalVolumeMounts:
      - name: alternative-conf
        mountPath: /alternative-conf
    initContainers:
      - name: get-did
        # retrieve all did material required for the realm and store it to a shared folder
        # image: ubuntu
        image: jgoclawski/wget
        command:
          # - /bin/bash
          - /bin/sh
        args:
          - -ec
          - |
            #!/bin/bash
            # apt-get -y update; apt-get -y install wget
            cd /did-material
            wget http://did:3000/did-material/cert.pfx
            wget http://did:3000/did-material/did.env
            cat /did-material/did.env
            envsubst < /original-conf/server.yaml | tee /alternative-conf/server.yaml
        volumeMounts:
          - name: did-material
            mountPath: /did-material
          - name: config-volume
            mountPath: /original-conf
          - name: alternative-conf
            mountPath: /alternative-conf
      # - name: register-at-tir
      #   image: ubuntu
      #   command:
      #     - /bin/bash
      #   args:
      #     - -ec
      #     - |
      #       #!/bin/bash
      #       source /did-material/did.env
      #       apt-get -y update; apt-get -y install curl
      #       curl -X 'POST' 'http://tir.trust-anchor.svc.cluster.local:8080/issuer' -H 'Content-Type: application/json' -d "{\"did\": \"${DID}\", \"credentials\": []}"
      #   volumeMounts:
      #     - name: did-material
      #       mountPath: /did-material
