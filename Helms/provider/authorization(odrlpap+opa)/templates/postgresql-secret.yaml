{{- if and (.Values.postgresql).enabled (and ((.Values.postgresql).generatePasswords).enabled ((.Values.postgresql).generatePasswords).secretName) }}
{{- $postgresqlSecretName := .Values.postgresql.generatePasswords.secretName }}
{{- $postgresqlAdminPasswordKey := default "postgres-admin-password" .Values.postgresql.auth.secretKeys.adminPasswordKey }}
{{- $postgresqlUserPassword := default "postgres-password" .Values.postgresql.auth.secretKeys.userPasswordKey }}
{{- $postgresqlAdminPassword := randAlphaNum 64 | b64enc | quote }}
{{- $postgresqlPassword := randAlphaNum 64 | b64enc | quote }}
{{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace $postgresqlSecretName) }}
{{- if $existingSecret }}
{{- $postgresqlAdminPassword = index $existingSecret.data $postgresqlAdminPasswordKey }}
{{- $postgresqlPassword = index $existingSecret.data $postgresqlUserPassword }}
{{- end }}

kind: Secret
apiVersion: v1
type: Opaque
metadata:
    name: {{ $postgresqlSecretName }}
    namespace: {{ $.Release.Namespace | quote }}
    annotations:
        "helm.sh/resource-policy": "keep"
data:
    {{ $postgresqlAdminPasswordKey }}: {{ $postgresqlAdminPassword }}
    {{ $postgresqlUserPassword }}: {{ $postgresqlPassword }}
{{ end }}