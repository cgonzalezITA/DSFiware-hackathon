utils:
  enabled: true
  echo:
    enabled: false

# -- configuration for the did-helper, should only be used for demonstrational deployments, 
# see https://hub.docker.com/repository/docker/itainnovaprojects/ita-didweb-generator/general
did:
  enabled: true
  type: web
  port: 3000
  pfx:
    fileName: cert.pfx
    alias: ita.es
    secretName: did-secret
    secretKeyField: store-pass
  serviceType: ClusterIP
  baseURL: https://fiwaredsc-consumer.ita.es
  outputFolder: /cert
  cert:
    country: es
    state: ES-AR
    locality: Zaragoza
    organization: ITA
    commonName: www.ita.es
    organizationunit: it
  ingress:
    enabled: false
    host: fiwaredsc-consumer.ita.es

keycloak:
  enabled: false
  global:
    compatibility:
      openshift:
        adaptSecurityContext: disabled
    postgresql:
      enabled: true
      auth:
        existingSecret: consumer-postgresql
  postgresql:
    diagnosticMode:
      enabled: false
    # primary:
      # initContainers:
      #   - name: change-folder-ownership
      #     image: docker.io/bitnami/keycloak:26.0.1
      #     imagePullPolicy: IfNotPresent
      #     command:
      #       - /bin/bash
      #     args:
      #       - -ec
      #       - |
      #         . /opt/bitnami/scripts/liblog.sh

      #         info "Changing the ownership fo the data folder"
      #         chown 1001:1001 /bitnami/postgresql -R
      #         whoami
      #     securityContext:
      #       allowPrivilegeEscalation: true
      #       privileged: true
      #       readOnlyRootFilesystem: true
      #       runAsGroup: 0
      #       runAsNonRoot: false
      #       runAsUser: 0
      #       seLinuxOptions: {}
      #       seccompProfile:
      #         type: RuntimeDefault
      #     volumeMounts:
      #       - name: data
      #         mountPath: /bitnami/postgresql
      # podSecurityContext:
      #   enabled: true
      #   fsGroupChangePolicy: OnRootMismatch
      #   sysctls: []
      #   supplementalGroups: []
      #   fsGroup: 1001
      # containerSecurityContext:
      #   enabled: true
      #   seLinuxOptions: {}
      #   runAsUser: 1001
      #   runAsGroup: 1001
      #   runAsNonRoot: true
      #   privileged: false
      #   readOnlyRootFilesystem: true
      #   allowPrivilegeEscalation: false
      #   capabilities:
      #     drop: ["ALL"]
      #   seccompProfile:
      #     type: "RuntimeDefault"
  image:
    registry: docker.io
    repository: bitnami/keycloak
    tag: 26.0.1
  auth:
    adminUser: admin
    existingSecret: consumer-keycloak
  ingress:
    enabled: false
  tls:
    enabled: true
    autoGenerated: false
    existingSecret: apisix/ita.es-tls
    usePem: true
    # hostnameStrict: false
  keycloakConfigCli:
    enabled: false
  extraEnvVars:
    - name: KC_PROXY
      value: passthrough
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    # - name: KEYCLOAK_SECURE_COOKIES
    #   value: "true"
    # - name: KEYCLOAK_HTTPS_PORT
    #   value: "443"
    - name: KEYCLOAK_PRODUCTION
      value: "true"
    - name: KEYCLOAK_FRONTEND_URL 
      value: https://fiwaredsc-consumer.ita.es
    - name: KEYCLOAK_LOG_LEVEL
      value: DEBUG
    - name: KEYCLOAK_EXTRA_ARGS
      value: "--import-realm --hostname https://fiwaredsc-consumer.ita.es"
    - name: KC_FEATURES
      value: "oid4vc-vci,account"
    - name: KEYCLOAK_ADMIN
      value: "admin0"
    - name: STORE_PASS
      valueFrom:
        secretKeyRef:
          name: didweb-secret
          key: store-pass
    - name: PFXFILE
      value: /did-material/cert.pfx     
    - name: KEY_ALIAS
      value: ita.es 
  extraVolumeMounts:
    - name: realm2import
      mountPath: /opt/bitnami/keycloak/data/import
    - name: did-material    
      mountPath: /did-material    
    - name: custom-entrypoint
      mountPath: /opt/bitnami/scripts/keycloak/entrypoint.sh
      subPath: entrypoint.sh  # Mount only the file, not the whole ConfigMap    
  extraVolumes:
    - name: realm2import
      configMap:
        # defaultMode: 493
        name: realm2import
    - name: did-material
      emptyDir: {}
    - name: custom-entrypoint
      configMap:
          name: custom-entrypoint
          defaultMode: 0555
          items:
          - key: entrypoint.sh
            path: entrypoint.sh
  extraDeploy: 
    - kind: ConfigMap
      apiVersion: v1    
      metadata:
        name: custom-entrypoint
      data:
        entrypoint.sh: |
          #!/bin/bash
          # Copyright Broadcom, Inc. All Rights Reserved.
          # SPDX-License-Identifier: APACHE-2.0

          # shellcheck disable=SC1091

          set -o errexit
          set -o nounset
          set -o pipefail
          #set -o xtrace # Uncomment this line for debugging purposes

          # Load libraries
          . /opt/bitnami/scripts/libbitnami.sh
          . /opt/bitnami/scripts/liblog.sh
          . /opt/bitnami/scripts/libkeycloak.sh

          # Load keycloak environment variables
          . /opt/bitnami/scripts/keycloak-env.sh
          
          echo -e "Starting script entrypoint.sh with:\n\t-[$@]\n
              \t-KEYCLOAK_EXTRA_ARGS_PREPENDED=[$KEYCLOAK_EXTRA_ARGS_PREPENDED]\n
              \t-KEYCLOAK_EXTRA_ARGS=[$KEYCLOAK_EXTRA_ARGS]"
          export $(cat /did-material/did.env)
          echo "DID=$DID"
          echo ""

          print_welcome_page

          # We add the copy from default config in the entrypoint to not break users
          # bypassing the setup.sh logic. If the file already exists do not overwrite (in
          # case someone mounts a configuration file in /opt/bitnami/postgresql/conf)
          debug "Copying files from $KEYCLOAK_DEFAULT_CONF_DIR to $KEYCLOAK_CONF_DIR"
          cp -nr "$KEYCLOAK_DEFAULT_CONF_DIR"/. "$KEYCLOAK_CONF_DIR"

          if [[ "$*" = *"/opt/bitnami/scripts/keycloak/run.sh"* ]]; then
              info "** Starting keycloak setup **"
              /opt/bitnami/scripts/keycloak/setup.sh
              info "** keycloak setup finished! **"
          fi

          echo ""
          exec "$@"
  initContainers:
    # retrieve all did material required for the realm and store it to a shared folder
    - name: get-did
      # image: ubuntu
      image: jgoclawski/wget
      command:
        # - /bin/bash
        - /bin/sh
      args:
        - -ec
        - |
          #!/bin/sh
          #!/bin/bash
          # apt-get -y update; apt-get -y install wget
          cd /did-material
          wget http://didweb:3000/did-material/cert.pfx
          wget http://didweb:3000/did-material/did.env
          cat /did-material/did.env
      volumeMounts:
        - name: did-material
          mountPath: /did-material
  realm:
    import: true
    name: cfastdistributionRealm
    displayName: CFastDistribution Realm 4 oid4vc
    displayNameHtml: <div class=\"kc-logo-text\"><span>CFastDistribution realm 4 oid4vc</span></div>"
    clientRoles: |
      "${DID}": [
        {
          "name": "ORDER_PRODUCER",
          "description": "Holder can produce shipping orders on behalf of their organization",
          "clientRole": true
        },
        {
          "name": "ORDER_CONSUMER",
          "description": "Holder consult shipping orders registered by their organization (a manager for example)",
          "clientRole": true
        }
      ]
    # -- users to be imported - be aware the env vars can be used and will be replaced
    users: |
      {
        "username": "op-user",
        "enabled": true,
        "email": "orderProducerUser@CFastDistribution.org",
        "firstName": "OrderProducer",
        "lastName": "User",
        "credentials": [
          {
            "type": "password",
            "value": "test"
          }
        ],
        "clientRoles": {
          "${DID}": [
            "ORDER_PRODUCER"
          ],
          "account": [
            "view-profile",
            "manage-account"
          ]
        },
        "groups": [
        ]
      },
      {
        "username": "oc-user",
        "enabled": true,
        "email": "orderConsumerUser@CFastDistribution.org",
        "firstName": "OrderConsumer",
        "lastName": "User",
        "credentials": [
          {
            "type": "password",
            "value": "test"
          }
        ],
        "clientRoles": {
          "${DID}": [
            "ORDER_CONSUMER"
          ],
          "account": [
            "view-profile",
            "manage-account"
          ]
        },
        "groups": [
        ]
      }
      
    # -- clients to be imported - be aware the env vars can be used and will be replaced
    clients: |
      {
        "clientId": "${DID}",
        "enabled": true,
        "description": "Client to connect CFastDistribution.org",
        "surrogateAuthRequired": false,
        "alwaysDisplayInConsole": false,
        "clientAuthenticatorType": "client-secret",
        "defaultRoles": [],
        "redirectUris": [],
        "webOrigins": [],
        "notBefore": 0,
        "bearerOnly": false,
        "consentRequired": false,
        "standardFlowEnabled": true,
        "implicitFlowEnabled": false,
        "directAccessGrantsEnabled": true,
        "serviceAccountsEnabled": false,
        "publicClient": true,
        "frontchannelLogout": true,
        "protocol": "oid4vc",
        "attributes": {
          "client.secret.creation.time": "1675260539",
          "vc.user-credential.format": "jwt_vc",
          "vc.user-credential.scope": "UserCredential",
          "vc.verifiable-credential.format": "jwt_vc",
          "vc.verifiable-credential.scope": "VerifiableCredential",
          "vc.operator-credential.format": "jwt_vc",
          "vc.operator-credential.scope": "OperatorCredential"
        },
        "protocolMappers": [
          {
            "name": "target-role-mapper",
            "protocol": "oid4vc",
            "protocolMapper": "oid4vc-target-role-mapper",
            "config": {
              "subjectProperty": "roles",
              "clientId": "${DID}",
              "supportedCredentialTypes": "VerifiableCredential,UserCredential,OperatorCredential"
            }
          },
          {
            "name": "context-mapper",
            "protocol": "oid4vc",
            "protocolMapper": "oid4vc-context-mapper",
            "config": {
              "context": "https://www.w3.org/2018/credentials/v1",
              "supportedCredentialTypes": "VerifiableCredential,UserCredential,OperatorCredential"
            }
          },
          {
            "name": "email-mapper",
            "protocol": "oid4vc",
            "protocolMapper": "oid4vc-user-attribute-mapper",
            "config": {
              "subjectProperty": "email",
              "userAttribute": "email",
              "supportedCredentialTypes": "UserCredential,OperatorCredential"
            }
          },
          {
            "name": "firstName-mapper",
            "protocol": "oid4vc",
            "protocolMapper": "oid4vc-user-attribute-mapper",
            "config": {
              "subjectProperty": "firstName",
              "userAttribute": "firstName",
              "supportedCredentialTypes": "UserCredential,OperatorCredential"
            }
          },
          {
            "name": "lastName-mapper",
            "protocol": "oid4vc",
            "protocolMapper": "oid4vc-user-attribute-mapper",
            "config": {
              "subjectProperty": "lastName",
              "userAttribute": "lastName",
              "supportedCredentialTypes": "UserCredential,OperatorCredential"
            }
          }
        ],
        "authenticationFlowBindingOverrides": {},
        "fullScopeAllowed": true,
        "nodeReRegistrationTimeout": -1,
        "defaultClientScopes": [],
        "optionalClientScopes": []
      }